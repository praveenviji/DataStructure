// queue implementation using array

class Main {
    public static void main(String[] args) {
        
        QueueUsingArray queue  = new QueueUsingArray(5);
        
        System.out.println(queue.isEmpty());
        System.out.println(queue.isFull());
        queue.enqueue(1);
        queue.enqueue(3);
        queue.enqueue(5);
        queue.enqueue(4);
        queue.enqueue(2);
        queue.enqueue(6);
        queue.display();
        System.out.println(queue.isFull());
        System.out.println(queue.isEmpty());
        
        System.out.println(queue.peek());
        System.out.println(queue.dequeue());
        System.out.println(queue.peek());
        System.out.println(queue.dequeue());
        System.out.println(queue.peek());
        System.out.println(queue.dequeue());
        System.out.println(queue.peek());
        System.out.println(queue.dequeue());
        System.out.println(queue.peek());
        System.out.println(queue.dequeue());
        System.out.println(queue.peek());
        System.out.println(queue.dequeue());
        System.out.println(queue.peek());
        System.out.println(queue.dequeue());
        
        
    }
}

class QueueUsingArray{
    
    int queue[];
    int front;
    int rear;
    int maxSize;
    QueueUsingArray(int size){
        queue=new int[size];
        maxSize=size;
        front=0;
        rear=-1;
    }
    
    public boolean isEmpty(){
        return rear==-1;
    }
    
    public boolean isFull(){
        return (rear==maxSize-1);
    }
    public void enqueue(int data){
        if(isFull()){
            System.out.println("Queue is full");
            return ;
        }
        
        queue[++rear]=data;
    }
    
    public int peek(){
        if(isEmpty()){
            System.out.println("Queue is empty");
            return -1;
        }
        
        return queue[front];
    }
    
    public int dequeue(){
         if(isEmpty()){
            System.out.println("Queue is empty");
            return -1;
        }
        
        int temp = queue[front];
        
        for(int i=1;i<=rear;i++){
            queue[i-1]=queue[i];
        }
        rear--;
        return temp;
    }
    
    public void display(){
         if(isEmpty()){
            System.out.println("Queue is empty");
            return ;
        }
        
        for(int i=0;i<=rear;i++){
            System.out.print(queue[i]+" ");
        }
        System.out.println();
    }
}

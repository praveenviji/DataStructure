// doubly LinkedList Implementation 

class Main {
    public static void main(String[] args) {
        
        
        DoublyLinkedList list = new DoublyLinkedList();
        
        list.insertAtEnd(10);
        list.insertAtEnd(20);
        list.insertAtEnd(30);
        list.insertAtBeg(5);
        list.insertAtBeg(1);
        list.insertAtPos(3,15);
        list.insertAtPos(5,25);
        list.insertAtPos(8,35);
        
        
        System.out.println(list.contains(7));
        list.displayFromBeginning();
        list.displayFromEnd();
        
        list.deleteAtEnd();
        list.displayFromBeginning();
        
        list.deleteAtPos(1);
         list.displayFromBeginning();
         
          list.deleteAtBeg();
         list.displayFromBeginning();
         
          list.deleteAtBeg();
         list.displayFromBeginning();
    }
}

class DoublyLinkedList{
    
    
    Node head;
    Node tail;
    
    DoublyLinkedList(){
        head=null;
        tail=null;
        
    }
    
    public void insertAtBeg(int data){
        
        Node node=new Node(data);
        
        if(head==null){
            head=node;
            tail=node;
            return;
        }
        
        node.next=head;
        head.prev=node;
        head=node;
    }
    
    
    public void insertAtPos(int pos , int data){
        
        if(pos==0){
            insertAtBeg(data);
            return;
        }
        
      
        Node temp=head;
        
        for(int i=1;i<pos;i++){
            temp=temp.next;
            
            if(temp==null){
                System.out.println("position is invalid");
                return;
            }
        }
        
        // if(temp.next==null){
        //     insertAtEnd(data);
        //     return;
        // }
        
        Node node=new Node(data);
        
        node.next=temp.next;
        node.prev=temp;
        
        if(temp==tail){
            tail=node;
        }
        else{
        temp.next.prev=node;
        }
        temp.next=node;
        
    }
    public void insertAtEnd(int data){
        
        Node newNode = new Node(data);
        
        if(head==null){
            head=newNode;
            tail=newNode;
            return;
        }
        
        tail.next=newNode;
        newNode.prev=tail;
        tail=newNode;
        
    }
    
    public void deleteAtBeg(){
        
        if(head==null){
            System.out.println("List is Empty");
            return ;
        }
        
        if(head.next==null){
            head=null;
            tail=null;
            return;
        }
        
        head=head.next;
        head.prev=null;
    }
    
    public void deleteAtPos(int pos ){
        
        if(pos==0){
            deleteAtBeg();
            return;
        }
        
        Node temp=head;
        Node prev = null;
        for(int i=1;i<=pos;i++){
            prev=temp;
            temp=temp.next;
            
            if(temp==null){
                System.out.println("Invalid position");
                return ;
            }
            
           prev.next=temp.next;
           
           if(temp.next==null){
               tail=prev;
           }
           else{
               temp.next.prev=prev;
           }
            
            
        }
    }
    
    void deleteAtEnd(){
        
        if(head==null){
            System.out.println("List is Empty");
            return;
        }
        
        if(head.next==null){
            head=null;
            tail=null;
            return;
        }
        // Node temp=tail;
        tail=tail.prev;
        // temp.prev=null;
        tail.next=null;
        
    }
    
    void displayFromBeginning(){
        
        if(head==null){
            System.out.println("List is Empty");
            return;
        }
        
        Node current = head;
        
        while(current!=null){
            System.out.print(current.data+" ");
            current=current.next;
        }
        System.out.println();
    }
    
    void displayFromEnd(){
        
        if(head==null){
            System.out.println("List is Empty");
            return;
        }
        
        Node current=tail;
        
        while(current!=null){
            System.out.print(current.data+" ");
            current=current.prev;
        }
        
        System.out.println();
    }
    
    public boolean contains(int data){
        
        if(head==null){
            System.out.println("List is Empty");
            return false;
        }
        
        Node temp = head;
        
        while(temp!=null){
            
            if(temp.data==data){
                return true;
            }
            
            temp=temp.next;
        }
        
        return false;
    }
    
    
    class Node{
        int data;
        Node prev;
        Node next;
        
        Node (int data){
            this.data=data;
            prev=null;
            next=null;
        }
    }
}

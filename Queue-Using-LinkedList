// queue implementation using linked list.


class Main {
    public static void main(String[] args) {
        QueueUsingLinkedList queue = new QueueUsingLinkedList();
        
        System.out.println(queue.isEmpty());
        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.enqueue(40);
        queue.display();
        // System.out.println(queue.peek());
        System.out.println(queue.isEmpty());
        System.out.println(queue.peek());
        System.out.println(queue.dequeue());
        System.out.println(queue.peek());
        System.out.println(queue.dequeue());
        System.out.println(queue.peek());
        System.out.println(queue.dequeue());
        System.out.println(queue.peek());
        System.out.println(queue.dequeue());
        System.out.println(queue.peek());
        System.out.println(queue.dequeue());
    }
}

class QueueUsingLinkedList{
    
    Node front,rear;
    
    QueueUsingLinkedList(){
        front=null;
        rear=null;
    }
    
    public boolean isEmpty(){
        return (front==null);
    }
    
    public void enqueue(int data){
        
        Node newNode = new Node(data);
        
        if(front==null){
            front=newNode;
            rear=newNode;
        }
        else{
            rear.next=newNode;
            rear=newNode;
        }
        
    }
    
    
    public int dequeue(){
        if(isEmpty()){
            System.out.println("Queue is empty");
            return -1;
        }
        if(front.next==null){
            int temp=front.data;
            front=null;
            rear=null;
            
            return temp;
        }
        
        int temp = front.data;
        front=front.next;
        return temp;
    }
    
    public int peek(){
     if(isEmpty()){
            System.out.println("Queue is empty");
            return -1;
        }
        
        return front.data;
        
        
    }
    
    public void display(){
        
        
        if(isEmpty()){
            System.out.println("Queue is empty");
            return ;
        }
        
        Node temp = front;
        
        while(temp!=null){
            System.out.print(temp.data+" ");
            temp=temp.next;
        }
        
        System.out.println();
    }
    
    class Node{
        int data ;
        Node next;
        
        public Node(int data){
            this.data=data;
            next=null;
        }
    }
    
    
}

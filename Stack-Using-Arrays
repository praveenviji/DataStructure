// stack implementation using array (Last-In-First-Out);

public class Main {
    public static void main(String[] args) {
       
       Stack stack = new Stack(5);
       System.out.println(stack.isEmpty());
       System.out.println(stack.isFull());
       stack.push(1);
       stack.push(2);
       stack.push(3);
       stack.push(4);
       stack.push(5);
       System.out.println(stack.pop());
       stack.push(6);
       System.out.println(stack.peek());
       System.out.println(stack.isFull());
       stack.display();
       
    }
}

class Stack {
    
    int stack[];
    int top;
    int size;
    
    public Stack(int num){
        stack = new int[num];
        top=-1;
        size=num;
    }
    
    public boolean isEmpty(){
        return (top==-1);
    }
    
    public boolean isFull(){
        return (top==size-1);
    }
    
    public void push(int data){
        if(isFull()){
            System.out.println("Stack Is Full");
            return;
        }
        stack[++top]=data;
    }
    
    public int peek(){
        if(isEmpty()){
            System.out.println("Stack is Empty");
            return -1;
        }
        return stack[top];
    }
    
    public int pop(){
        if(isEmpty()){
            System.out.println("Stack is Empty");
            return -1;
        }
        return stack[top--];
    }
    
    public void display(){
        if(isEmpty()){
            System.out.println("Stack Is Empty");
            return ;
        }
        
        for(int i=0;i<=top;i++){
            System.out.print(stack[i]+" ");
        }
        System.out.println();
    }
    
}

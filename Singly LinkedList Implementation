//Singly LinkedList Implementation.

class Main {
    public static void main(String[] args) {
    
    LinkedList list = new LinkedList();
    
    // list.insert(1);
    // // list.insert(2);
    // // list.insert(3);
    // // list.insert(4);
    // // list.insert(5);
    
    // list.display();
    
    // list.insertAtBeg(6);
    // list.insertAtBeg(5);
    // list.display();
    // list.insertAtPos(3,2);
    // list.display();
    //  list.insertAtPos(6,2);
    //  list.deleteAtEnd();
    //   list.display();
    //   list.deleteAtBeg();
    //   list.display();
    //   list.deleteAtPos(5);
    //   list.display();
    
    // reverse a linked list
    
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(4);
    list.insert(5);
    list.insert(6);
    
    list.display();
    
    // list.reverse();
    
    // list.display();
    
    list.deleteAtPos(5);
    list.display();
    
    list.deleteAtPos(4);
    list.display();
    
    }
}

class LinkedList{
    
    class Node{
        int data;
        Node next;
        
        public Node(int data){
            this.data=data;
            next=null;
        }
    }
    
    Node head;
    
    public void insertAtBeg(int data){
        
        Node newNode=new Node(data);
        
        if(head==null)
        {
         head=newNode;   
        }
        
        else{
            newNode.next=head;
            head=newNode;
        }
        
        
    }
    
    
    public void insertAtPos(int index,int data){
        
        Node newNode =new Node(data);
        
        if(index==0){
            head=newNode;
        }
        
        // 1,2 ->>>>1,3,2
        else{
            
            Node temp = head;
            for(int i=0;i<index-1;i++)
            {
                temp=temp.next;
                if(temp==null)
                {
                    System.out.println("Invalid index");
                    return ;
                }
            }
            
            newNode.next=temp.next;
            temp.next=newNode;
            
        }
        
    }
    
    public void insert(int data){
        
        Node newNode=new Node(data);
        
        if(head==null)
        {
            head=newNode;
        }
        else{
            Node current = head;
            while(current.next!=null){
                current=current.next;
            }
            current.next=newNode;
        }
    }
    
    public void deleteAtBeg(){
        
        if(head==null){
            System.out.println("LIST IS EMPTY");
            return ;
        }
        if(head.next==null)
        {
            head=null;
            return ;
        }
        
        head=head.next;
    }
    
    public void deleteAtPos(int index){
        
        if(head==null)
        {
             System.out.println("LIST IS EMPTY");
            return ;
        }
        
        if(index==0)
        {
            deleteAtBeg();
            return ;
        }
        
        Node temp = head;
        for(int i=0;i<index-1;i++)
        {
            temp=temp.next;
            if(temp==null)
            {
                System.out.println("Invalid index");
                return ;
            }
        }
        // 1,2,3,4  ->>>> 1,2,4 ; pos:2
        
        temp.next=temp.next.next;
        
    }
    
    public void deleteAtEnd(){
        if(head==null){
            System.out.println("LIST IS EMPTY");
            return ;
        }
         if(head.next==null)
         {
             head=null;
             return;
         }
            Node current = head;
            while(current.next!=null && current.next.next!=null){
                current=current.next;
            }
            current.next=null;
        
    }
    
    public void reverse(){
        
        if(head==null)
        {
            System.out.println("List is Empty");
            return ;
        }
        
        Node previous=null;
        Node current=head;
        Node next = head;
        
        while(current!=null){
            next=current.next;
            current.next=previous;
            previous=current;
            current=next;
            
        }
        head=previous;
        
        
    }
    
    
    public void display(){
        if(head==null){
            System.out.println("LIST IS EMPTY");
            return;
        }
        
        System.out.println("head->data :"+head.data);
        
            Node temp=head;
            while(temp!=null){
                System.out.print(temp.data+" ");
                temp=temp.next;
            }
            System.out.println("\n");
        
    }
    
}
